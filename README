NAME
    MooX::Struct - make simple lightweight record-like structures that make
    sounds like cows

SYNOPSIS
     use MooX::Struct
        Point   => [ 'x', 'y' ],
        Point3D => [ -extends => ['Point'], 'z' ],
     ;
 
     my $origin = Point3D->new( x => 0, y => 0, z => 0 );

DESCRIPTION
    MooX::Struct allows you to create cheap struct-like classes for your
    data using Moo.

    While similar in spirit to MooseX::Struct and Class::Struct,
    MooX::Struct has a somewhat different usage pattern. Rather than
    providing you with a "struct" keyword which can be used to define
    structs, you define all the structs as part of the "use" statement. This
    means they happen at compile time.

    A struct is just an "anonymous" Moo class. MooX::Struct creates this
    class for you, and installs a lexical alias for it in your namespace.
    Thus your module can create a "Point3D" struct, and some other module
    can too, and they won't interfere with each other. All struct classes
    inherit from MooX::Struct; and MooX::Struct provides a useful method:
    "object_id" (see Object::ID).

    Arguments for MooX::Struct are key-value pairs, where keys are the
    struct names, and values are arrayrefs.

     use MooX::Struct
        Person   => [qw/ name address /],
        Company  => [qw/ name address registration_number /];

    The elements in the array are the attributes for the struct (which will
    be created as read-only attributes), however certain array elements are
    treated specially.

    *   As per the example in the "SYNOPSIS", "-extends" introduces a list
        of parent classes for the struct. If not specified, then classes
        inherit from MooX::Struct itself.

        Structs can inherit from other structs, or from normal classes. If
        inheriting from another struct, then you *must* define both in the
        same "use" statement.

         # Not like this.
         use MooX::Struct Point   => [ 'x', 'y' ];
         use MooX::Struct Point3D => [ -extends => ['Point'], 'z' ];
 
         # Like this.
         use MooX::Struct
            Point   => [ 'x', 'y' ],
            Point3D => [ -extends => ['Point'], 'z' ],
         ;

    *   If an attribute name is followed by a coderef, this is installed as
        a method instead.

         use MooX::Struct
            Person => [
               qw( name age sex ),
               greet => sub {
                  my $self = shift;
                  CORE::say "Hello ", $self->name;
               },
            ];

        But if you're defining methods for your structs, then you've
        possibly missed the point of them.

    *   If an attribute name is followed by an arrayref, these are used to
        set the options for the attribute. For example:

         use MooX::Struct
            Person  => [ name => [ is => 'ro', required => 1 ] ];

    *   Attribute names may be "decorated" with prefix and postfix "sigils".
        The prefix sigils of "@" and "%" specify that the attribute isa
        arrayref or hashref respectively. (Blessed arrayrefs and hashrefs
        are accepted; as are objects which overload "@{}" and "%{}".) The
        prefix sigil "$" specifies that the attribute value must not be an
        unblessed arrayref or hashref. The postfix sigil "!" specifies that
        the attribute is required.

         use MooX::Struct
            Person  => [qw( $name! @children )];

         Person->new();         # dies, name is required
         Person->new(           # dies, children should be arrayref
            name     => 'Bob',
            children => 2,
         );

    Prior to the key-value list, some additional flags can be given. These
    begin with hyphens. The flag "-rw" indicates that attributes should be
    read-write rather than read-only.

     use MooX::Struct -rw,
        Person => [
           qw( name age sex ),
           greet => sub {
              my $self = shift;
              CORE::say "Hello ", $self->name;
           },
        ];

    Flags "-trace" and "-deparse" may be of use debugging.

BUGS
    Please report any bugs to
    <http://rt.cpan.org/Dist/Display.html?Queue=MooX-Struct>.

SEE ALSO
    Moo, MooseX::Struct, Class::Struct.

AUTHOR
    Toby Inkster <tobyink@cpan.org>.

COPYRIGHT AND LICENCE
    This software is copyright (c) 2012 by Toby Inkster.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

DISCLAIMER OF WARRANTIES
    THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
    WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
    MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

